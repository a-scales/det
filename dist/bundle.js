!function(e){var n={};function r(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)r.d(t,o,function(n){return e[n]}.bind(null,o));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s=0)}([function(e,n,r){"use strict";r.r(n);var t=new(function(){function e(){}return e.prototype.JSXrender=function(e,n){for(var r,t=[],o=2;o<arguments.length;o++)t[o-2]=arguments[o];if("string"!=typeof e){if("e"===e.name){console.log(e,n,t);var i=new e(n).render();return this.JSXProcessChildren(i,t).forEach(function(e){i.appendChild(e)}),i}return e()}return r=document.createElement(e),this.JSXProcessChildren(r,t).forEach(function(e){try{r.appendChild(e)}catch(n){console.log("Error inserting",e," : ",n)}}),n&&Object.keys(n).forEach(function(e){r.setAttribute(e,n[e])}),this.JSXLog.apply(this,[e,n].concat(t)),r},e.prototype.JSXProcessChildren=function(e,n){var r=this,t=[];return n.forEach(function(n){var o;if("string"==typeof n)o=document.createTextNode(n);else{if(n instanceof Array){var i=r.JSXProcessChildren(e,n);return void(t=t.concat(i))}o=n}t.push(o)}),t},e.prototype.JSXLog=function(e,n){for(var r=[],t=2;t<arguments.length;t++)r[t-2]=arguments[t];console.log(e),r.forEach(function(e){console.log("|-",e,typeof e)})},e}());!function(){function e(e){return this.ContentTemplate=t.JSXrender("h1",null,"FooBar"),e.length>0&&(this.ContentTemplate=t.JSXrender("h1",null,e)),this}e.prototype.render=function(){return this.ContentTemplate}}();var o=function(){function e(e){console.log("props",e),this.props=e}return e.prototype.render=function(){return t.JSXrender("h4",null,this.props.test)},e}(),i=["one","two","three","Covenant is Gay"].map(function(e){return t.JSXrender("li",null,t.JSXrender("a",{href:"#"},e))});console.log("MENU",i),document.body.appendChild(t.JSXrender("div",null,t.JSXrender("h1",{id:"title"},"Hello"),t.JSXrender("nav",null,t.JSXrender("ul",null,i)),t.JSXrender("section",null,t.JSXrender("h2",{test:"123"},"Section"),t.JSXrender(o,{test:"bar"},"123"))))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,