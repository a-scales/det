!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";t.r(n);var r,o=new(function(){function e(){}return e.prototype.JSXrender=function(e,n){for(var t,r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];if("string"!=typeof e){if("e"===e.name||"n"===e.name){console.log(e,n,r);var i=new e(n).render();return this.JSXProcessChildren(i,r).forEach(function(e){i.appendChild(e)}),i}return e()}return t=document.createElement(e),this.JSXProcessChildren(t,r).forEach(function(e){try{t.appendChild(e)}catch(n){console.log("Error inserting",e," : ",n)}}),n&&Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])}),t},e.prototype.JSXProcessChildren=function(e,n){var t=this,r=[];return n.forEach(function(n){var o;if("string"==typeof n)o=document.createTextNode(n);else{if(n instanceof Array){var i=t.JSXProcessChildren(e,n);return void(r=r.concat(i))}o=n}r.push(o)}),r},e.prototype.JSXLog=function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];console.log(e),t.forEach(function(e){console.log("|-",e,typeof e)})},e}()),i=(r=function(e,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)},function(e,n){function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});!function(){function e(e){return this.ContentTemplate=o.JSXrender("h1",null,"FooBar"),e.length>0&&(this.ContentTemplate=o.JSXrender("h1",null,e)),this}e.prototype.render=function(){return this.ContentTemplate}}();!function(){function e(e){console.log("props",e),this.props=e}e.prototype.render=function(){return o.JSXrender("div",null,o.JSXrender("h4",null,this.props.test))}}();var u=function(e){function n(n){return e.call(this,n)||this}return i(n,e),n.prototype.render=function(){return o.JSXrender("h2",null,this.Props.test)},n}(function(){function e(e){this.Props=e}return e.prototype.render=function(){},e}()),c=[{title:"one",link:"#"},{title:"two",link:"#"}].map(function(e){return o.JSXrender("li",null,o.JSXrender("a",{href:e.link},e.title))});console.log("MENU",c),document.body.appendChild(o.JSXrender("div",null,o.JSXrender("h1",{id:"title"},"Hello"),o.JSXrender("nav",null,o.JSXrender("ul",null,c)),o.JSXrender("section",null,o.JSXrender("h2",{test:"123"},"Section"),o.JSXrender(u,{test:"ree"}))))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,